// Library
import { UseGuards } from '@nestjs/common';
import { Query, Mutation, Resolver, Subscription, Args } from '@nestjs/graphql';
import { PubSub } from 'graphql-subscriptions';

// Internal
import { I{{pascalCase moduleName}} } from '../shared/{{moduleName}}.model';
import { {{pascalCase moduleName}}Service } from '../shared/{{moduleName}}.service';
import { {{pascalCase moduleName}}Guard } from './{{moduleName}}.guard';

const pubSub = new PubSub();

// @UseGuards({{pascalCase moduleName}}Guard)
@Resolver('{{pascalCase moduleName}}')
export class {{pascalCase moduleName}}Resolver {
constructor(private readonly {{pascalCase moduleName}}Service: {{pascalCase moduleName}}Service) {}

@Query()
async get{{pascalCase moduleName}}(@Args('filters') filters: Object) {
    return await this.{{pascalCase moduleName}}Service.findAll(params);
}

@Query('{{pascalCase moduleName}}')
async findOneById(obj, args, context, info): Promise<I{{pascalCase moduleName}}> {
    const { id } = args;
        return await this.{{pascalCase moduleName}}Service.findOneById(+id);
    }

    @Mutation('create{{pascalCase moduleName}}')
    async create(obj, args: I{{pascalCase moduleName}}, context, info): Promise<I{{pascalCase moduleName}}> {
        const created{{pascalCase moduleName}} = await this.{{pascalCase moduleName}}Service.create(args);
        pubSub.publish('{{pascalCase moduleName}}Recieved', { {{pascalCase moduleName}}Recieved: created{{pascalCase moduleName}} });
        return created{{pascalCase moduleName}};
    }

    @Mutation('update{{pascalCase moduleName}}')
    async update(obj, args: I{{pascalCase moduleName}}, context, info): Promise<I{{pascalCase moduleName}}> {
        const { id } = args;
        const updated{{pascalCase moduleName}} = await this.{{pascalCase moduleName}}Service.update(id, args);
        pubSub.publish('{{pascalCase moduleName}}Recieved', { {{pascalCase moduleName}}Recieved: updated{{pascalCase moduleName}} });
        return updated{{pascalCase moduleName}};
    }

    @Subscription('{{pascalCase moduleName}}Recieved')
    {{pascalCase moduleName}}Recieved() {
        return pubSub.asyncIterator('{{pascalCase moduleName}}Recieved');
    }
}