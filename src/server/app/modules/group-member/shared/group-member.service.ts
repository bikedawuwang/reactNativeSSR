// Library
import {
Injectable,
BadRequestException,
NotFoundException
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';

// Internal
import { GroupMemberModel, GroupMember } from './group-member.model';

@Injectable()
export class GroupMemberService {
private readonly GroupMember: GroupMemberModel[] = [];

constructor(
@InjectRepository(GroupMemberModel)
private readonly GroupMemberRepository: Repository<GroupMemberModel>
    ) {}

    protected getId(paramId: any): number {
        const id = parseInt(paramId, 10);

        if (isNaN(id) || typeof id !== 'number') {
            throw new BadRequestException();
        }

        return id;
    }

    async create(GroupMemberPayload: GroupMember): Promise<GroupMember> {
        const GroupMember = new GroupMemberModel();
        // -- Autogenerated Model Service Definition --
		GroupMember.memberId = GroupMemberPayload.memberId;
		GroupMember.groupId = GroupMemberPayload.groupId;
        GroupMember.date = GroupMemberPayload.date;
        
        // Check if group exists
        const doesGroupExist = await this.GroupMemberRepository.find({ 
            memberId: GroupMemberPayload.memberId,
            groupId: GroupMemberPayload.groupId,
        });
        let existingGroup = doesGroupExist && doesGroupExist.length && doesGroupExist[0];
        return (existingGroup) ? existingGroup : await this.GroupMemberRepository.save(GroupMember);
    }

    async findAll(): Promise<GroupMemberModel[]> {
        return await this.GroupMemberRepository.find({
            cache: true,
            order: { id: 'ASC' }
        });
    }

    async findOneById(id: number): Promise<GroupMemberModel> {
        return await this.GroupMemberRepository.findOne(id, { cache: true });
    }

    async update(paramId: any, entity: GroupMemberModel): Promise<GroupMemberModel> {
        await this.GroupMemberRepository.update(paramId, entity);
        return await this.findOneById(paramId);
    }

    async delete(paramId: any): Promise<void> {
        const id = this.getId(paramId);
        try {
            await this.GroupMemberRepository.delete(id);
        } catch (err) {
            throw new NotFoundException();
        }
    }
}